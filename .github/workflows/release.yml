# Reference: https://github.com/crate-ci/typos/blob/f8d11b3a696122fde2fee567dc70c0864683b481/.github/workflows/post-release.yml

name: post-release
on:
  push:
    tags:
    - "v*.*.*"

env:
  BIN_NAME: sqllogictest
  CRATE_NAME: sqllogictest-bin

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      release_version: ${{ env.RELEASE_VERSION }}
    steps:
    - name: Get the release version from the tag
      shell: bash
      if: env.RELEASE_VERSION == ''
      run: |
        # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
        echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        echo "version is: ${{ env.RELEASE_VERSION }}"
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: Generate Release Notes
      run: |
        ./.github/workflows/release-notes.py --tag ${{ env.RELEASE_VERSION }} --output notes-${{ env.RELEASE_VERSION }}.md
        cat notes-${{ env.RELEASE_VERSION }}.md
    - name: Create GitHub release
      id: release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_VERSION }}
        release_name: ${{ env.RELEASE_VERSION }}
        body_path: notes-${{ env.RELEASE_VERSION }}.md
  build-release:
    name: build-release
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-22.04
          rust: stable
          target: x86_64-unknown-linux-musl
        - os: ubuntu-22.04
          rust: stable
          target: aarch64-unknown-linux-musl
        - os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
        - os: macos-latest
          rust: stable
          target: aarch64-apple-darwin
        - os: windows-2019
          rust: stable
          target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: Install packages (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo dpkg --add-architecture arm64
        cat <<EOL | sudo tee "/etc/apt/sources.list"
        deb [arch=amd64] http://azure.archive.ubuntu.com/ubuntu jammy main restricted universe multiverse
        deb [arch=amd64] http://azure.archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse
        deb [arch=amd64] http://azure.archive.ubuntu.com/ubuntu jammy-security main restricted universe multiverse
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main restricted universe multiverse
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted universe multiverse
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security main restricted universe multiverse
        EOL
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends xz-utils liblz4-tool musl-tools musl-dev musl-dev:arm64
        echo "RUSTFLAGS=-Clinker=rust-lld" >> $GITHUB_ENV
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        target: ${{ matrix.target }}
    - name: Build release binary
      run: cargo build -p sqllogictest-bin --target ${{ matrix.target }} --verbose --release
    - name: Build archive
      shell: bash
      run: |
        outdir="./target/${{ env.TARGET_DIR }}/release"
        staging="${{ env.CRATE_NAME }}-${{ needs.create-release.outputs.release_version }}-${{ matrix.target }}"
        mkdir -p "$staging"
        cp {README.md,LICENSE-*,CHANGELOG.md} "$staging/"
        if [ "${{ matrix.os }}" = "windows-2019" ]; then
          cp "target/${{ matrix.target }}/release/${{ env.BIN_NAME }}.exe" "$staging/"
          cd "$staging"
          7z a "../$staging.zip" .
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
        else
          cp "target/${{ matrix.target }}/release/${{ env.BIN_NAME }}" "$staging/"
          tar czf "$staging.tar.gz" -C "$staging" .
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        fi
    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream